trigger:
- main

pool:
  name: 'MyAgentPool'


resources:
  repositories:
  - repository: terraform_azure
    type: github
    name: Lilithsudo/terraform_azure
    endpoint: Lilithsudo

jobs:
- job: Terraform
  steps:
  - checkout: self
  - checkout: terraform_azure
    persistCredentials: true

  - script: |
      echo "Vérifier si Terraform est installé"
      if ! command -v terraform &> /dev/null
      then
          echo "Terraform n'est pas installé. Installation en cours..."
          wget https://releases.hashicorp.com/terraform/1.0.0/terraform_1.0.0_linux_amd64.zip
          unzip terraform_1.0.0_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
      else
          echo "Terraform est déjà installé."
      fi
      terraform version
    displayName: 'Installer Terraform'

  - script: |
      echo "Initialiser Terraform"
      terraform init
    workingDirectory: $(Build.SourcesDirectory)/terraform_azure
    displayName: 'Initialiser Terraform'

  - script: |
      echo "Planifier Terraform"
      terraform plan -out=tfplan
    workingDirectory: $(Build.SourcesDirectory)/terraform_azure
    displayName: 'Planifier Terraform'

  - script: |
      echo "Appliquer Terraform"
      terraform apply -auto-approve tfplan
    workingDirectory: $(Build.SourcesDirectory)/terraform_azure
    displayName: 'Appliquer Terraform'

- job: BuildAndDeploy
  steps:
  - script: |
      echo "Test de la variable SSH_PRIVATE_KEY"
      echo "$SSH_PRIVATE_KEY" | wc -c
    displayName: 'Test de la variable SSH_PRIVATE_KEY'

  - script: |
      # Ajout de la clé SSH dans un fichier temporaire
      echo "$SSH_PRIVATE_KEY" > temp_ssh_key
      chmod 600 temp_ssh_key
      # Utilisation de la clé SSH comme d'habitude
      ssh -o StrictHostKeyChecking=no -i temp_ssh_key adminuser@20.111.48.176 "votre_commande"
    displayName: 'Utiliser la clé SSH depuis les secrets'
