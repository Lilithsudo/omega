trigger:
- main

pool:
  name: 'MyAgentPool'

variables:
- group: SSHKeys
- group: DockerHubCredentials
- group: GitHubToken

resources:
  repositories:
  - repository: terraform_azure
    type: github
    name: Lilithsudo/terraform_azure
    endpoint: Lilithsudo

jobs:
- job: Terraform
  steps:
  - checkout: self
  - checkout: terraform_azure
    persistCredentials: true

  - script: |
      echo "Vérifier si Terraform est installé"
      if ! command -v terraform &> /dev/null
      then
          echo "Terraform n'est pas installé. Installation en cours..."
          wget https://releases.hashicorp.com/terraform/1.0.0/terraform_1.0.0_linux_amd64.zip
          unzip terraform_1.0.0_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
      else
          echo "Terraform est déjà installé."
      fi
      terraform version
    displayName: 'Installer Terraform'

  - script: |
      echo "Initialiser Terraform"
      terraform init
    workingDirectory: $(Build.SourcesDirectory)/terraform_azure
    displayName: 'Initialiser Terraform'

  - script: |
      echo "Planifier Terraform"
      terraform plan -out=tfplan
    workingDirectory: $(Build.SourcesDirectory)/terraform_azure
    displayName: 'Planifier Terraform'

  - script: |
      echo "Appliquer Terraform"
      terraform apply -auto-approve tfplan
    workingDirectory: $(Build.SourcesDirectory)/terraform_azure
    displayName: 'Appliquer Terraform'

- job: BuildAndDeploy
  dependsOn: Terraform
  steps:
  - script: |
      echo "Test de la variable SSH_PRIVATE_KEY"
      echo "$(SSH_PRIVATE_KEY)" | wc -c
    displayName: 'Test de la variable SSH_PRIVATE_KEY'

  - script: |
      # Utiliser la clé SSH à partir de l'agent pool
      ssh -o StrictHostKeyChecking=no -i /home/adm1/.ssh/id_rsa adminuser@20.111.48.176 "echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCb8BXYzZZ8dEUiazKiXjXO/+Noh3yXWOw6R1p/gykCnUBGLp47MAVLSpgVtawrn1TOD0DumoidXbOr7t0uSov8b2T6ll1Iq5j+SscIu34tbG14VG84P6Uncn+njP0mmV2S5gVdjvUdSvkJjyOtsLedDxkuB3YKde3dp2l3LldV5uFY9uU+hk7rXZm9db2wi/QRWJGad7avY7T8HgkU5ar24CkZEazzD7vbuKmiqmibhDvtbVTzl71/pzQnpkE2EXQPuasua+FUG5Ci1IE2n6wjILnBKx7KmeuY3uVJGSJFbAQYr7nmg8UPZNpxZ8VrEn6xoVHNzQaQJbwAO2t5T5h7Gm4f+tXudu8AE7stJXao/MDl6vBBMl3EIoqtO1HaKW+5BNmNJ1z5x7Rc1FW5pDUiVQWOlrUhBLYMsGW5/fbQYWVAr/eZNESI7UB+SOBFvZznRVZLY3yAMWFDDsKT48nzMaHbk68xnjFo7I+TSJ+S7MGvB/w19opArIlCWkV8apo2wBgciUFuyyeZ6PuZECggVKlw4vXemxRYS4ScNoC/0T6MGf1FrBajEOEPin2dYpPFuQiZuRIohYE8aTUrQiSUs5q3FmM4z4X5150Ebym2uuf/BOmcJiYskck9ZFSGcAAjSIZBV8HisN4WKFtlQFKXDCvfhT0IxtkbPAdwiMVLlw== sarah95bayed@gmail.com' >> ~/.ssh/authorized_keys"
    displayName: 'Préparer la clé SSH'

  - script: |
      # Installation de Docker sur la machine distante
      ssh -o StrictHostKeyChecking=no -i /home/adm1/.ssh/id_rsa adminuser@20.111.48.176 "sudo apt-get update && sudo apt-get install -y docker.io"
    displayName: 'Installer Docker sur la machine distante'

  - script: |
      # Build et déploiement du backend
      ssh -o StrictHostKeyChecking=no -i /home/adm1/.ssh/id_rsa adminuser@20.111.48.176 << 'ENDSSH'
      # Commandes pour vider la mémoire vive et cloner le dépôt
      free -h && sudo sysctl vm.drop_caches=3 && free -h
      rm -rf omega
      git clone https://github.com/Lilithsudo/omega.git
      cd omega
      # Commandes Docker pour le backend
      docker-compose -f docker-compose-backend.yml down
      docker-compose -f docker-compose-backend.yml build
      docker-compose -f docker-compose-backend.yml up -d
      # Vider la mémoire vive à nouveau
      free -h && sudo sysctl vm.drop_caches=3 && free -h
      ENDSSH
    displayName: 'Build et déploiement du backend sur la machine distante'
  
  - script: |
      # Construire l'application Maven sur la machine distante
      ssh -o StrictHostKeyChecking=no -i /home/adm1/.ssh/id_rsa adminuser@20.111.48.176 << 'ENDSSH'
      # Commandes pour construire l'application Maven
      free -h && sudo sysctl vm.drop_caches=3 && free -h
      cd omega/ihm-omega
      mvn -Dmaven.test.failure.ignore=true package
      # ... Ajoutez d'autres étapes de build ici ...
      free -h && sudo sysctl vm.drop_caches=3 && free -h
      ENDSSH
    displayName: "Construire l'application Maven sur la machine distante"

- job: ManageContainers
  dependsOn: BuildAndDeploy
  pool:
    name: 'MyAgentPool'
  steps:
  - script: |
      ssh -o StrictHostKeyChecking=no -i /home/adm1/.ssh/id_rsa adminuser@20.111.48.176 << 'ENDSSH'
      # Vider la mémoire vive et gérer les conteneurs
      free -h && sudo sysctl vm.drop_caches=3 && free -h
      cd omega/docker/docker-compose/master
      docker-compose stop ihm-omega consulter_omega
      docker-compose build ihm-omega consulter_omega
      docker-compose up -d ihm-omega consulter_omega
      free -h && sudo sysctl vm.drop_caches=3 && free -h
      ENDSSH
    displayName: 'Run container app'

  - script: |
      ssh -o StrictHostKeyChecking=no -i /home/adm1/.ssh/id_rsa adminuser@20.111.48.176 << 'ENDSSH'
      # Commandes pour tester les conteneurs
      ls -l
      # Ajoutez ici vos commandes de test des conteneurs
      ENDSSH
    displayName: 'Test container'

  - script: |
      ssh -o StrictHostKeyChecking=no -i /home/adm1/.ssh/id_rsa adminuser@20.111.48.176 << 'ENDSSH'
      # Nettoyage des conteneurs
      cd omega/docker/docker-compose/master
      docker-compose stop ihm-omega consulter_omega
      docker-compose rm -f ihm-omega consulter_omega
      free -h && sudo sysctl vm.drop_caches=3 && free -h
      ENDSSH
    displayName: 'Clean container'

- job: PushDockerImages
  dependsOn: ManageContainers
  pool:
    name: 'MyAgentPool'
  steps:
  - script: |
      ssh -o StrictHostKeyChecking=no -i /home/adm1/.ssh/id_rsa adminuser@20.111.48.176 << 'ENDSSH'
      # Instructions pour la construction et le déploiement des images Docker
      free -h && sudo sysctl vm.drop_caches=3 && free -h
      cd omega/ihm-omega/
      docker build -t lilithsudo/ihm-omega:latest .
      cd ../consulteromega/  # Assurez-vous que le nom du dossier est correct
      docker build -t lilithsudo/consulteromega:latest .  # Assurez-vous que le nom de l'image est en minuscules
      echo $(tokenlilithsudo) | docker login docker.pkg.github.com -u Lilithsudo --password-stdin
      docker push lilithsudo/ihm-omega:latest
      docker push lilithsudo/consulteromega:latest
      docker logout
      free -h && sudo sysctl vm.drop_caches=3 && free -h
      ENDSSH
    displayName: 'Push images app dockerhub'



