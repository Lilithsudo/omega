trigger:
- main

pool:
  name: 'MyAgentPool'

resources:
  repositories:
  - repository: terraform_azure
    type: github
    name: Lilithsudo/terraform_azure
    endpoint: Lilithsudo

steps:
- checkout: self
- checkout: terraform_azure
  persistCredentials: true

- script: |
    echo "Vérifier si Terraform est installé"
    if ! command -v terraform &> /dev/null
    then
        echo "Terraform n'est pas installé. Installation en cours..."
        wget https://releases.hashicorp.com/terraform/1.0.0/terraform_1.0.0_linux_amd64.zip
        unzip terraform_1.0.0_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
    else
        echo "Terraform est déjà installé."
    fi
    terraform version
  displayName: 'Installer Terraform'

- script: |
    echo "Initialiser Terraform"
    terraform init
  workingDirectory: $(Build.SourcesDirectory)/terraform_azure
  displayName: 'Initialiser Terraform'

- script: |
    echo "Planifier Terraform"
    terraform plan -out=tfplan
  workingDirectory: $(Build.SourcesDirectory)/terraform_azure
  displayName: 'Planifier Terraform'

- script: |
    echo "Appliquer Terraform"
    terraform apply -auto-approve tfplan
  workingDirectory: $(Build.SourcesDirectory)/terraform_azure
  displayName: 'Appliquer Terraform'



jobs:
- job: BuildAndDeploy
  steps:
  - script: |
      # Étape d'ajout de la clé SSH publique de l'agent Azure DevOps à la liste des clés autorisées sur la machine frontendBackendSarahVM
      echo "$(cat chemin_vers_clef_publique_azure_devops.pub)" >> ~/.ssh/authorized_keys
    displayName: 'Ajouter la clé SSH publique de l\'agent Azure DevOps'

  - script: |
      # Étape d'installation de Docker sur la machine distante
      ssh -i /home/adm1/terraform_azure/clef_azure_sarah.pem adminuser@20.111.48.176 "sudo apt-get update && sudo apt-get install -y docker.io"
    displayName: 'Installer Docker sur la machine distante'

  - script: |
      # Étape de build et de déploiement du backend
      ssh -i /home/adm1/terraform_azure/clef_azure_sarah.pem adminuser@20.111.48.176 << 'ENDSSH'
      # Commandes pour vider la mémoire vive et effectuer le clone depuis https://github.com/Lilithsudo/omega
      free -h && sudo sysctl vm.drop_caches=3 && free -h
      rm -rf omega
      git clone https://github.com/Lilithsudo/omega.git
      cd omega
      # Étape Docker pour le backend
      docker-compose -f docker-compose-backend.yml down
      docker-compose -f docker-compose-backend.yml build
      docker-compose -f docker-compose-backend.yml up -d
      # Vider la mémoire vive à nouveau
      free -h && sudo sysctl vm.drop_caches=3 && free -h
      ENDSSH
    displayName: 'Build et déploiement du backend sur frontendBackendSarahVM'
    env:
      KEY_PASSPHRASE: $(KEY_PASSPHRASE) # Vous pouvez stocker la phrase secrète de la clé SSH en tant que variable d'environnement sécurisée dans Azure DevOps
