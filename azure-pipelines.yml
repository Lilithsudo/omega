trigger:
- main

pool:
  name: 'MyAgentPool'

variables:
- group: SSHKeys

resources:
  repositories:
  - repository: terraform_azure
    type: github
    name: Lilithsudo/terraform_azure
    endpoint: Lilithsudo

jobs:
- job: Terraform
  steps:
  - checkout: self
  - checkout: terraform_azure
    persistCredentials: true

  - script: |
      echo "Vérifier si Terraform est installé"
      if ! command -v terraform &> /dev/null
      then
          echo "Terraform n'est pas installé. Installation en cours..."
          wget https://releases.hashicorp.com/terraform/1.0.0/terraform_1.0.0_linux_amd64.zip
          unzip terraform_1.0.0_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
      else
          echo "Terraform est déjà installé."
      fi
      terraform version
    displayName: 'Installer Terraform'

  - script: |
      echo "Initialiser Terraform"
      terraform init
    workingDirectory: $(Build.SourcesDirectory)/terraform_azure
    displayName: 'Initialiser Terraform'

  - script: |
      echo "Planifier Terraform"
      terraform plan -out=tfplan
    workingDirectory: $(Build.SourcesDirectory)/terraform_azure
    displayName: 'Planifier Terraform'

  - script: |
      echo "Appliquer Terraform"
      terraform apply -auto-approve tfplan
    workingDirectory: $(Build.SourcesDirectory)/terraform_azure
    displayName: 'Appliquer Terraform'

- job: BuildAndDeploy
  steps:
  - script: |
      echo "Test de la variable SSH_PRIVATE_KEY"
      echo "$(SSH_PRIVATE_KEY)" | wc -c
    displayName: 'Test de la variable SSH_PRIVATE_KEY'

  - script: |
      # Utiliser la clé SSH à partir de l'agent pool
      ssh -o StrictHostKeyChecking=no -i $(Agent.ToolsDirectory)/ssh/id_rsa adminuser@20.111.48.176 "echo 'ssh-rsa VOTRE_CLÉ_PUBLIQUE' >> ~/.ssh/authorized_keys"
    displayName: 'Préparer la clé SSH'

  - script: |
      # Installation de Docker sur la machine distante
      ssh -o StrictHostKeyChecking=no -i $(Agent.ToolsDirectory)/ssh/id_rsa adminuser@20.111.48.176 "sudo apt-get update && sudo apt-get install -y docker.io"
    displayName: 'Installer Docker sur la machine distante'

  - script: |
      # Build et déploiement du backend
      ssh -o StrictHostKeyChecking=no -i $(Agent.ToolsDirectory)/ssh/id_rsa adminuser@20.111.48.176 << 'ENDSSH'
      # Commandes pour vider la mémoire vive et cloner le dépôt
      free -h && sudo sysctl vm.drop_caches=3 && free -h
      rm -rf omega
      git clone https://github.com/Lilithsudo/omega.git
      cd omega
      # Commandes Docker pour le backend
      docker-compose -f docker-compose-backend.yml down
      docker-compose -f docker-compose-backend.yml build
      docker-compose -f docker-compose-backend.yml up -d
      # Vider la mémoire vive à nouveau
      free -h && sudo sysctl vm.drop_caches=3 && free -h
      ENDSSH
    displayName: 'Build et déploiement du backend sur la machine distante'